The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
.env.example
POSTGRES_USER=finance_user
POSTGRES_PASSWORD=pass123
POSTGRES_DB=finance_db

DB_HOST=db
DB_PORT=5432
DB_USER=finance_user
DB_PASSWORD=pass123
DB_NAME=finance_db
DB_SSLMODE=disable

JWT_SECRET=my-super-secret-key
----
Dockerfile
FROM golang:1.24.1-alpine AS builder

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY . .

RUN go build -o server ./cmd/server

FROM alpine:latest

WORKDIR /root/
COPY --from=builder /app/server .
# COPY --from=builder /app/.env .env

EXPOSE 8080

CMD ["./server"]
----
README.md
# tspo_poject_2sem
----
cmd/server/main.go
// @title API fin_tracker
// @version 1.0
// @description ПР1-6.
// @host localhost:8080
// @BasePath /
// @schemes http

package main

import (
	"fin_tracker/internal/config"
	"fin_tracker/internal/model"
	"fin_tracker/internal/redis"
	"fin_tracker/internal/router"
	"log"
	"os"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	"github.com/sirupsen/logrus"
)

func main() {
	redis.InitRedis()
	logFile, err := os.OpenFile("/app/logs/api.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err == nil {
		logrus.SetOutput(logFile)
	} else {
		logrus.Warn("Не удалось создать файл логов, используем stdout")
	}

	cfg := config.Load()

	db, err := gorm.Open(postgres.Open(cfg.DSN()), &gorm.Config{})
	if err != nil {
		log.Fatalf("Ошибка подключения к базе данных: %v", err)
	}

	err = db.AutoMigrate(
		&model.User{},
		&model.Currency{},
		&model.Account{},
		&model.Category{},
		&model.Transaction{},
		&model.RecurringTransaction{},
	)
	if err != nil {
		log.Fatalf("Ошибка миграции: %v", err)
	}

	log.Println("Подключение к БД успешно, миграция завершена")

	r := router.SetupRouter(db)
	if err := r.Run(":8080"); err != nil {
		log.Fatalf("Ошибка запуска сервера: %v", err)
	}
}

----
db/init.sql
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- CREATE DATABASE fin_db;
-- CREATE USER user WITH ENCRYPTED PASSWORD 'user';
-- GRANT ALL PRIVILEGES ON DATABASE fin_db TO user;

----
deploy/nginx/default.conf
limit_req_zone $binary_remote_addr zone=login_zone:10m rate=1r/s;

upstream finance_api {
    server app1:8080;
    server app2:8080;
    server app3:8080;
}

# HTTP → HTTPS редирект
server {
    listen 80;
    server_name localhost;

    return 301 https://$host$request_uri;
}

# HTTPS сервер
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # Запрет нежелательных методов
    if ($request_method !~ ^(GET|POST|PATCH|DELETE)$) {
        return 405;
    }

    # Ограничение доступа к /admin по IP
    location /admin {
        allow 127.0.0.1;
        deny all;
    }

    # Замедление /login
    limit_req zone=login_zone burst=5 nodelay;

    location /login {
        proxy_pass http://finance_api/login;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Ограничение на размер запроса
    client_max_body_size 2M;

    # Проксирование всех остальных запросов
    location / {
        proxy_pass http://finance_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Скрытие версии Nginx
    server_tokens off;
}
----
docker-compose.yml
services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finance_api_1
    restart: always
    depends_on:
      - db
    expose:
      - "8080"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finance_api_2
    restart: always
    depends_on:
      - db
    expose:
      - "8080"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs

  app3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finance_api_3
    restart: always
    depends_on:
      - db
    expose:
      - "8080"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs

  db:
    image: postgres:17
    container_name: finance_db
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - .env
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data

  nginx:
    image: nginx:stable
    container_name: finance_nginx
    ports:
      - "81:80"
      - "444:443"
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./deploy/nginx/ssl:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    depends_on:
      - app1
      - app2
      - app3

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6380:6379"


volumes:
  postgres_data:

----
go.mod
module fin_tracker

go 1.23

toolchain go1.23.9

require (
	github.com/gin-gonic/gin v1.10.1
	github.com/golang-jwt/jwt/v5 v5.2.2
	github.com/google/uuid v1.6.0
	github.com/joho/godotenv v1.5.1
	github.com/redis/go-redis/v9 v9.9.0
	github.com/sirupsen/logrus v1.9.3
	github.com/swaggo/files v1.0.1
	github.com/swaggo/gin-swagger v1.6.0
	github.com/swaggo/swag v1.8.12
	golang.org/x/crypto v0.31.0
	gorm.io/driver/postgres v1.6.0
	gorm.io/gorm v1.30.0
)

require (
	github.com/KyleBanks/depth v1.2.1 // indirect
	github.com/PuerkitoBio/purell v1.1.1 // indirect
	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
	github.com/bytedance/sonic v1.11.6 // indirect
	github.com/bytedance/sonic/loader v0.1.1 // indirect
	github.com/cespare/xxhash/v2 v2.3.0 // indirect
	github.com/cloudwego/base64x v0.1.4 // indirect
	github.com/cloudwego/iasm v0.2.0 // indirect
	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
	github.com/gabriel-vasile/mimetype v1.4.3 // indirect
	github.com/gin-contrib/sse v0.1.0 // indirect
	github.com/go-openapi/jsonpointer v0.19.5 // indirect
	github.com/go-openapi/jsonreference v0.19.6 // indirect
	github.com/go-openapi/spec v0.20.4 // indirect
	github.com/go-openapi/swag v0.19.15 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/go-playground/validator/v10 v10.20.0 // indirect
	github.com/goccy/go-json v0.10.2 // indirect
	github.com/jackc/pgpassfile v1.0.0 // indirect
	github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect
	github.com/jackc/pgx/v5 v5.6.0 // indirect
	github.com/jackc/puddle/v2 v2.2.2 // indirect
	github.com/jinzhu/inflection v1.0.0 // indirect
	github.com/jinzhu/now v1.1.5 // indirect
	github.com/josharian/intern v1.0.0 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/mailru/easyjson v0.7.6 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
	github.com/rogpeppe/go-internal v1.14.1 // indirect
	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
	github.com/ugorji/go/codec v1.2.12 // indirect
	golang.org/x/arch v0.8.0 // indirect
	golang.org/x/net v0.30.0 // indirect
	golang.org/x/sync v0.10.0 // indirect
	golang.org/x/sys v0.28.0 // indirect
	golang.org/x/text v0.21.0 // indirect
	golang.org/x/tools v0.26.0 // indirect
	google.golang.org/protobuf v1.34.1 // indirect
	gopkg.in/yaml.v2 v2.4.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)

----
internal/config/config.go
package config

import (
	"log"
	"os"

	"github.com/joho/godotenv"
)

type Config struct {
	DBHost     string
	DBPort     string
	DBUser     string
	DBPassword string
	DBName     string
	SSLMode    string
	JWTSecret  string
}

func Load() *Config {
	err := godotenv.Load()
	if err != nil {
		log.Println("Файл .env не найден, читаем переменные окружения напрямую")
	}

	return &Config{
		DBHost:     getEnv("DB_HOST", "localhost"),
		DBPort:     getEnv("DB_PORT", "5433"),
		DBUser:     getEnv("DB_USER", "finance_user"),
		DBPassword: getEnv("DB_PASSWORD", "pass123"),
		DBName:     getEnv("DB_NAME", "finance_db"),
		SSLMode:    getEnv("DB_SSLMODE", "disable"),
		JWTSecret:  os.Getenv("JWT_SECRET"),
	}
}

func (c *Config) DSN() string {
	return "host=" + c.DBHost +
		" port=" + c.DBPort +
		" user=" + c.DBUser +
		" password=" + c.DBPassword +
		" dbname=" + c.DBName +
		" sslmode=" + c.SSLMode
}

func getEnv(key, defaultVal string) string {
	if val := os.Getenv(key); val != "" {
		return val
	}
	return defaultVal
}

----
internal/handler/account_handler.go
package handler

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"fin_tracker/internal/model"
	"fin_tracker/internal/redis"
	"fin_tracker/internal/service"

	"github.com/gin-gonic/gin"
)

type AccountHandler struct {
	accountService *service.AccountService
}

func NewAccountHandler(accountService *service.AccountService) *AccountHandler {
	return &AccountHandler{accountService}
}

type CreateAccountInput struct {
	Name           string  `json:"name" binding:"required"`
	CurrencyCode   string  `json:"currency_code" binding:"required,len=3"`
	InitialBalance float64 `json:"initial_balance"`
}

type updateAccountRequest struct {
	Name           *string  `json:"name"`
	CurrencyCode   *string  `json:"currency_code"`
	InitialBalance *float64 `json:"initial_balance"`
}

// CreateAccount создаёт новый финансовый счёт
// @Summary Создание счёта
// @Tags accounts
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param input body CreateAccountInput true "Данные счёта"
// @Success 201 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Router /accounts [post]
func (h *AccountHandler) CreateAccount(c *gin.Context) {
	var input CreateAccountInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	accountID, err := h.accountService.CreateAccount(userID.(string), input.Name, input.CurrencyCode, input.InitialBalance)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"account_id": accountID})
}

// GetAccounts возвращает список счетов пользователя
// @Summary Получить все счета
// @Tags accounts
// @Security BearerAuth
// @Produce json
// @Success 200 {array} map[string]interface{}
// @Failure 401 {object} map[string]string
// @Router /accounts [get]
func (h *AccountHandler) GetAccounts(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	accounts, err := h.accountService.GetAccountsByUser(userID.(string))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to load accounts"})
		return
	}

	response := make([]gin.H, 0, len(accounts))
	for _, acc := range accounts {
		response = append(response, gin.H{
			"id":              acc.ID,
			"name":            acc.Name,
			"currency_code":   acc.CurrencyCode,
			"initial_balance": acc.InitialBalance,
			"created_at":      acc.CreatedAt,
		})
	}

	c.JSON(http.StatusOK, response)
}

// GetAccount возвращает счёт по ID
// @Summary Получить счёт по ID
// @Tags accounts
// @Security BearerAuth
// @Produce json
// @Param id path string true "Account ID"
// @Success 200 {object} map[string]interface{}
// @Failure 403 {object} map[string]string
// @Failure 404 {object} map[string]string
// @Router /accounts/{id} [get]
func (h *AccountHandler) GetAccount(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	accountID := c.Param("id")
	cacheKey := fmt.Sprintf("account:%s:user:%s", accountID, userID.(string))

	val, err := redis.Client.Get(redis.Ctx, cacheKey).Result()
	if err == nil {
		var acc model.Account
		if err := json.Unmarshal([]byte(val), &acc); err == nil {
			c.JSON(http.StatusOK, gin.H{
				"id":              acc.ID,
				"name":            acc.Name,
				"currency_code":   acc.CurrencyCode,
				"initial_balance": acc.InitialBalance,
				"created_at":      acc.CreatedAt,
			})
			return
		}
	}

	account, err := h.accountService.GetAccountByID(userID.(string), accountID)
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"error": err.Error()})
		return
	}

	data, _ := json.Marshal(account)
	redis.Client.Set(redis.Ctx, cacheKey, data, 10*time.Minute)

	c.JSON(http.StatusOK, gin.H{
		"id":              account.ID,
		"name":            account.Name,
		"currency_code":   account.CurrencyCode,
		"initial_balance": account.InitialBalance,
		"created_at":      account.CreatedAt,
	})
}

// DeleteAccount удаляет счёт
// @Summary Удалить счёт
// @Tags accounts
// @Security BearerAuth
// @Param id path string true "Account ID"
// @Success 204
// @Failure 403 {object} map[string]string
// @Router /accounts/{id} [delete]
func (h *AccountHandler) DeleteAccount(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	accountID := c.Param("id")
	err := h.accountService.DeleteAccount(userID.(string), accountID)
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusNoContent)
}

// UpdateAccount обновляет данные счёта
// @Summary Обновить счёт
// @Tags accounts
// @Security BearerAuth
// @Accept json
// @Param id path string true "Account ID"
// @Param input body updateAccountRequest true "Поля для обновления"
// @Success 204
// @Failure 400 {object} map[string]string
// @Failure 403 {object} map[string]string
// @Router /accounts/{id} [patch]
func (h *AccountHandler) UpdateAccount(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	var input updateAccountRequest
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	accountID := c.Param("id")

	dto := service.UpdateAccountInput{
		Name:           input.Name,
		CurrencyCode:   input.CurrencyCode,
		InitialBalance: input.InitialBalance,
	}

	err := h.accountService.UpdateAccount(userID.(string), accountID, dto)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusNoContent)
}

----
internal/handler/auth_handler.go
package handler

import (
	"net/http"

	"fin_tracker/internal/service"

	"github.com/gin-gonic/gin"
)

type AuthHandler struct {
	authService *service.AuthService
}

func NewAuthHandler(authService *service.AuthService) *AuthHandler {
	return &AuthHandler{authService}
}

type RegisterInput struct {
	Email    string `json:"email" binding:"required,email"`
	Password string `json:"password" binding:"required,min=6"`
	FullName string `json:"full_name"`
}

type LoginInput struct {
	Email    string `json:"email" binding:"required,email"`
	Password string `json:"password" binding:"required"`
}

// Register регистрирует нового пользователя
// @Summary Регистрация
// @Description Создаёт нового пользователя и возвращает JWT
// @Tags auth
// @Accept json
// @Produce json
// @Param input body RegisterInput true "Регистрационные данные"
// @Success 201 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Router /register [post]
func (h *AuthHandler) Register(c *gin.Context) {
	var input RegisterInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	token, err := h.authService.Register(input.Email, input.Password, input.FullName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"token": token})
}

// Login выполняет вход пользователя
// @Summary Авторизация
// @Description Проверяет логин/пароль и возвращает JWT
// @Tags auth
// @Accept json
// @Produce json
// @Param input body LoginInput true "Данные для входа"
// @Success 200 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Router /login [post]
func (h *AuthHandler) Login(c *gin.Context) {
	var input LoginInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	token, err := h.authService.Login(input.Email, input.Password)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"token": token})
}

----
internal/handler/user_handler.go
package handler

import (
	"net/http"

	"fin_tracker/internal/service"

	"github.com/gin-gonic/gin"
)

type UserHandler struct {
	userService *service.UserService
}

func NewUserHandler(userService *service.UserService) *UserHandler {
	return &UserHandler{userService}
}

// GetMe возвращает данные текущего пользователя
// @Summary Получить текущего пользователя
// @Tags user
// @Security BearerAuth
// @Produce json
// @Success 200 {object} map[string]string
// @Failure 401 {object} map[string]string
// @Router /me [get]
func (h *UserHandler) GetMe(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "User ID not found in context"})
		return
	}

	user, err := h.userService.GetByID(userID.(string))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":         user.ID,
		"email":      user.Email,
		"full_name":  user.FullName,
		"created_at": user.CreatedAt,
	})
}

----
internal/middleware/auth.go
package middleware

import (
	"fin_tracker/internal/config"
	"fmt"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
)

var jwtKey = []byte(config.Load().JWTSecret)

func JWTAuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" || !strings.HasPrefix(authHeader, "Bearer ") {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Authorization header missing or invalid"})
			return
		}

		tokenString := strings.TrimPrefix(authHeader, "Bearer ")

		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, jwt.ErrSignatureInvalid
			}
			return jwtKey, nil
		})

		if err != nil || !token.Valid {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
			return
		}

		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok || !token.Valid {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid token claims"})
			return
		}

		fmt.Println("claims:", claims)

		userID, ok := claims["user_id"].(string)
		if !ok {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid user_id in token"})
			return
		}

		c.Set("user_id", userID)
		c.Next()
	}
}

----
internal/model/account.go
package model

import (
	"time"

	"github.com/google/uuid"
)

type Account struct {
	ID             uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	UserID         uuid.UUID `gorm:"type:uuid;not null"`
	Name           string    `gorm:"not null"`
	CurrencyCode   string    `gorm:"type:char(3);not null"`
	InitialBalance float64
	CreatedAt      time.Time `gorm:"autoCreateTime"`

	Currency     Currency
	Transactions []Transaction `gorm:"foreignKey:AccountID"`
}

----
internal/model/category.go
package model

import (
	"time"

	"github.com/google/uuid"
)

type Category struct {
	ID        uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	UserID    uuid.UUID `gorm:"type:uuid;not null"`
	Name      string    `gorm:"not null"`
	Type      string    `gorm:"type:text;check:type IN ('income','expense')"`
	IsDefault bool
	CreatedAt time.Time `gorm:"autoCreateTime"`

	Transactions []Transaction `gorm:"foreignKey:CategoryID"`
}

----
internal/model/currency.go
package model

type Currency struct {
	Code   string `gorm:"primaryKey;type:char(3)"`
	Name   string `gorm:"not null"`
	Symbol string
}

----
internal/model/recurring_transaction.go
package model

import (
	"time"

	"github.com/google/uuid"
)

type RecurringTransaction struct {
	ID             uuid.UUID  `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	UserID         uuid.UUID  `gorm:"type:uuid;not null"`
	AccountID      uuid.UUID  `gorm:"type:uuid;not null"`
	CategoryID     *uuid.UUID `gorm:"type:uuid"`
	Amount         float64    `gorm:"not null"`
	CurrencyCode   string     `gorm:"type:char(3);not null"`
	Description    string
	Interval       string    `gorm:"type:text;check:interval IN ('daily','weekly','monthly')"`
	StartDate      time.Time `gorm:"not null"`
	EndDate        *time.Time
	NextOccurrence time.Time `gorm:"not null"`
	CreatedAt      time.Time `gorm:"autoCreateTime"`

	Account  Account
	Category *Category
	Currency Currency
}

----
internal/model/transaction.go
package model

import (
	"time"

	"github.com/google/uuid"
)

type Transaction struct {
	ID              uuid.UUID  `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	UserID          uuid.UUID  `gorm:"type:uuid;not null"`
	AccountID       uuid.UUID  `gorm:"type:uuid;not null"`
	CategoryID      *uuid.UUID `gorm:"type:uuid"`
	Amount          float64    `gorm:"not null"`
	CurrencyCode    string     `gorm:"type:char(3);not null"`
	Description     string
	TransactionDate time.Time `gorm:"not null"`
	CreatedAt       time.Time `gorm:"autoCreateTime"`

	Account  Account
	Category *Category
	Currency Currency
}

----
internal/model/user.go
package model

import (
	"time"

	"github.com/google/uuid"
)

type User struct {
	ID           uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	Email        string    `gorm:"uniqueIndex;not null"`
	PasswordHash string    `gorm:"not null"`
	FullName     string
	CreatedAt    time.Time `gorm:"autoCreateTime"`

	Accounts              []Account              `gorm:"foreignKey:UserID"`
	Categories            []Category             `gorm:"foreignKey:UserID"`
	Transactions          []Transaction          `gorm:"foreignKey:UserID"`
	RecurringTransactions []RecurringTransaction `gorm:"foreignKey:UserID"`
}

----
internal/redis/redis.go
package redis

import (
	"context"
	"log"
	"os"

	"github.com/redis/go-redis/v9"
)

var Client *redis.Client
var Ctx = context.Background()

func InitRedis() {
	addr := os.Getenv("REDIS_ADDR")
	if addr == "" {
		addr = "localhost:6379"
	}

	Client = redis.NewClient(&redis.Options{
		Addr: addr,
		DB:   0,
	})

	if err := Client.Ping(Ctx).Err(); err != nil {
		log.Fatalf("Redis connection error: %v", err)
	}
}

----
internal/repository/account_repository.go
package repository

import (
	"fin_tracker/internal/model"

	"gorm.io/gorm"
)

type AccountRepository struct {
	db *gorm.DB
}

func NewAccountRepository(db *gorm.DB) *AccountRepository {
	return &AccountRepository{db}
}

func (r *AccountRepository) Create(account *model.Account) error {
	return r.db.Create(account).Error
}

func (r *AccountRepository) GetByUserID(userID string) ([]model.Account, error) {
	var accounts []model.Account
	err := r.db.Where("user_id = ?", userID).Find(&accounts).Error
	return accounts, err
}

func (r *AccountRepository) GetByID(id string) (*model.Account, error) {
	var account model.Account
	err := r.db.First(&account, "id = ?", id).Error
	if err != nil {
		return nil, err
	}
	return &account, nil
}

func (r *AccountRepository) Delete(id string) error {
	return r.db.Delete(&model.Account{}, "id = ?", id).Error
}

func (r *AccountRepository) Update(account *model.Account) error {
	return r.db.Save(account).Error
}

----
internal/repository/currency_repository.go
package repository

import (
	"gorm.io/gorm"
)

type CurrencyRepository struct {
	db *gorm.DB
}

func NewCurrencyRepository(db *gorm.DB) *CurrencyRepository {
	return &CurrencyRepository{db}
}

func (r *CurrencyRepository) Exists(code string) (bool, error) {
	var count int64
	err := r.db.Table("currencies").Where("code = ?", code).Count(&count).Error
	return count > 0, err
}

----
internal/repository/user_repository.go
package repository

import (
	"fin_tracker/internal/model"

	"gorm.io/gorm"
)

type UserRepository struct {
	db *gorm.DB
}

func NewUserRepository(db *gorm.DB) *UserRepository {
	return &UserRepository{db}
}

func (r *UserRepository) Create(user *model.User) error {
	return r.db.Create(user).Error
}

func (r *UserRepository) FindByEmail(email string) (*model.User, error) {
	var user model.User
	if err := r.db.Where("email = ?", email).First(&user).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

func (r *UserRepository) FindByID(id string) (*model.User, error) {
	var user model.User
	if err := r.db.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

----
internal/router/router.go
package router

import (
	_ "fin_tracker/docs"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"gorm.io/gorm"

	"fin_tracker/internal/handler"
	"fin_tracker/internal/middleware"
	"fin_tracker/internal/repository"
	"fin_tracker/internal/service"
)

func SetupRouter(db *gorm.DB) *gin.Engine {
	r := gin.Default()

	// Репозитории
	userRepo := repository.NewUserRepository(db)
	accountRepo := repository.NewAccountRepository(db)
	currencyRepo := repository.NewCurrencyRepository(db)

	// Сервисы
	authService := service.NewAuthService(userRepo)
	userService := service.NewUserService(userRepo)
	accountService := service.NewAccountService(accountRepo, currencyRepo)

	// Хендлеры
	authHandler := handler.NewAuthHandler(authService)
	userHandler := handler.NewUserHandler(userService)
	accountHandler := handler.NewAccountHandler(accountService)

	// Публичные маршруты
	r.POST("/register", authHandler.Register)
	r.POST("/login", authHandler.Login)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Приватные маршруты с JWT middleware
	auth := r.Group("/")
	auth.Use(middleware.JWTAuthMiddleware())
	auth.GET("/me", userHandler.GetMe)
	auth.GET("/accounts", accountHandler.GetAccounts)
	auth.GET("/accounts/:id", accountHandler.GetAccount)
	auth.POST("/accounts", accountHandler.CreateAccount)
	auth.PATCH("/accounts/:id", accountHandler.UpdateAccount)
	auth.DELETE("/accounts/:id", accountHandler.DeleteAccount)

	return r
}

----
internal/service/account_service.go
package service

import (
	"errors"

	"fin_tracker/internal/model"
	"fin_tracker/internal/repository"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
)

type AccountService struct {
	accountRepo  *repository.AccountRepository
	currencyRepo *repository.CurrencyRepository
}

func NewAccountService(accountRepo *repository.AccountRepository, currencyRepo *repository.CurrencyRepository) *AccountService {
	return &AccountService{accountRepo, currencyRepo}
}

type UpdateAccountInput struct {
	Name           *string
	CurrencyCode   *string
	InitialBalance *float64
}

func (s *AccountService) CreateAccount(userID, name, currencyCode string, initialBalance float64) (uuid.UUID, error) {
	exists, err := s.currencyRepo.Exists(currencyCode)
	if err != nil || !exists {
		logrus.Errorf("Ошибка, неизвестная валюта: %v", err)
		return uuid.Nil, errors.New("invalid currency code")
	}

	account := model.Account{
		ID:             uuid.New(),
		UserID:         uuid.MustParse(userID),
		Name:           name,
		CurrencyCode:   currencyCode,
		InitialBalance: initialBalance,
	}

	logrus.Infof("Создание нового счёта: %s", account.Name)

	err = s.accountRepo.Create(&account)
	if err != nil {
		logrus.Errorf("Ошибка при создании счёта: %v", err)
		return uuid.Nil, err
	}

	logrus.Infof("Счёт успешно создан: %s", account.Name)
	return account.ID, nil
}

func (s *AccountService) GetAccountsByUser(userID string) ([]model.Account, error) {
	return s.accountRepo.GetByUserID(userID)
}

func (s *AccountService) GetAccountByID(userID, accountID string) (*model.Account, error) {
	account, err := s.accountRepo.GetByID(accountID)
	if err != nil {
		return nil, err
	}

	if account.UserID.String() != userID {
		return nil, errors.New("access denied")
	}

	return account, nil
}

func (s *AccountService) DeleteAccount(userID, accountID string) error {
	account, err := s.accountRepo.GetByID(accountID)
	if err != nil {
		return err
	}

	if account.UserID.String() != userID {
		return errors.New("access denied")
	}

	return s.accountRepo.Delete(accountID)
}

func (s *AccountService) UpdateAccount(userID, accountID string, input UpdateAccountInput) error {
	account, err := s.accountRepo.GetByID(accountID)
	if err != nil {
		return err
	}

	if account.UserID.String() != userID {
		return errors.New("access denied")
	}

	if input.CurrencyCode != nil {
		ok, err := s.currencyRepo.Exists(*input.CurrencyCode)
		if err != nil {
			return err
		}
		if !ok {
			return errors.New("invalid currency code")
		}
		account.CurrencyCode = *input.CurrencyCode
	}

	if input.Name != nil {
		account.Name = *input.Name
	}

	if input.InitialBalance != nil {
		account.InitialBalance = *input.InitialBalance
	}

	return s.accountRepo.Update(account)
}

----
internal/service/auth_service.go
package service

import (
	"errors"
	"fin_tracker/internal/config"
	"fin_tracker/internal/model"
	"fin_tracker/internal/repository"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/bcrypt"
)

var jwtKey = []byte(config.Load().JWTSecret)

type AuthService struct {
	userRepo *repository.UserRepository
}

func NewAuthService(userRepo *repository.UserRepository) *AuthService {
	return &AuthService{userRepo}
}

func (s *AuthService) Register(email, password, fullName string) (string, error) {
	logrus.Infof("Попытка зарегистрировать пользователя: %s", email)

	_, err := s.userRepo.FindByEmail(email)
	if err == nil {
		logrus.Errorf("Ошибка регистрации, пользователь с таким email уже существует: %v", email)
		return "", errors.New("user already exists")
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		logrus.Errorf("Ошибка генерации пароля: %v", err)
		return "", err
	}

	user := model.User{
		ID:           uuid.New(),
		Email:        email,
		PasswordHash: string(hash),
		FullName:     fullName,
	}

	if err := s.userRepo.Create(&user); err != nil {
		logrus.Errorf("Ошибка создания пользователя: %v", err)
		return "", err
	}

	logrus.Infof("Пользователь успешно создан: %s", user.Email)
	return generateJWT(user.ID)
}

func (s *AuthService) Login(email, password string) (string, error) {
	user, err := s.userRepo.FindByEmail(email)
	if err != nil {
		return "", errors.New("invalid credentials")
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(password)); err != nil {
		return "", errors.New("invalid credentials")
	}

	return generateJWT(user.ID)
}

func generateJWT(userID uuid.UUID) (string, error) {
	claims := jwt.MapClaims{
		"user_id": userID.String(),
		"exp":     time.Now().Add(24 * time.Hour).Unix(),
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(jwtKey)
}

----
internal/service/user_service.go
package service

import (
	"fin_tracker/internal/model"
	"fin_tracker/internal/repository"
)

type UserService struct {
	userRepo *repository.UserRepository
}

func NewUserService(userRepo *repository.UserRepository) *UserService {
	return &UserService{userRepo}
}

func (s *UserService) GetByID(id string) (*model.User, error) {
	return s.userRepo.FindByID(id)
}

----
logs/api.log

----
logs/error.log

--END--